plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21

        // Включаем core library desugaring
        coreLibraryDesugaringEnabled true
    }

    compileSdkVersion 35
    ndkVersion = "28.0.13004108"
    namespace = "com.rechain.dapp"

    kotlinOptions {
            jvmTarget = '21'
        }

    kotlin {
        jvmToolchain(21)
    }
    
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.rechain.dapp"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix "-debug"
        }
        release {
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    // Firebase (BOM управляет версиями)
    implementation platform('com.google.firebase:firebase-bom:33.7.0')
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // Google Play Services
    implementation 'com.google.android.gms:play-services-location:21.3.0'

    // Huawei AGConnect
    implementation 'com.huawei.agconnect:agconnect-core:1.5.2.300'
    // implementation 'ru.rustore.sdk:push:6.10.0'

    // ✅ Добавляем недостающие библиотеки
    // Lifecycle (для LifecycleService)
    implementation "androidx.lifecycle:lifecycle-service:2.8.4"

    // WorkManager (для фоновых задач)
    implementation "androidx.work:work-runtime-ktx:2.9.1"

    // Timber (для логирования)
    implementation "com.jakewharton.timber:timber:5.0.1"

    // Kotlin Coroutines (часто нужны с WorkManager)
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1"
}

apply plugin: 'com.huawei.agconnect'