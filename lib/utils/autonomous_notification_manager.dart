import 'package:flutter/services.dart';
import 'package:matrix/matrix.dart';
import 'package:rechainonline/utils/platform_infos.dart';

class AutonomousNotificationManager {
  static const MethodChannel _channel = MethodChannel('rechain.autonomous/notifications');
  
  static AutonomousNotificationManager? _instance;
  static AutonomousNotificationManager get instance {
    _instance ??= AutonomousNotificationManager._();
    return _instance!;
  }
  
  AutonomousNotificationManager._();
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> showNotification({
    required String type,
    required String title,
    required String message,
    Map<String, dynamic>? payload,
  }) async {
    if (!PlatformInfos.isAndroid) return;
    
    try {
      await _channel.invokeMethod('showNotification', {
        'type': type,
        'title': title,
        'message': message,
        'payload': payload ?? {},
      });
    } catch (e) {
      Logs().e('Error showing autonomous notification: $e');
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  Future<void> showMessageNotification({
    required String senderName,
    required String message,
    required String roomId,
  }) async {
    if (!PlatformInfos.isAndroid) return;
    
    try {
      await _channel.invokeMethod('showMessageNotification', {
        'senderName': senderName,
        'message': message,
        'roomId': roomId,
      });
    } catch (e) {
      Logs().e('Error showing message notification: $e');
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
  Future<void> showCallNotification({
    required String callerName,
    required String callId,
  }) async {
    if (!PlatformInfos.isAndroid) return;
    
    try {
      await _channel.invokeMethod('showCallNotification', {
        'callerName': callerName,
        'callId': callId,
      });
    } catch (e) {
      Logs().e('Error showing call notification: $e');
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> showUserJoinedNotification({
    required String userName,
    required String roomName,
  }) async {
    if (!PlatformInfos.isAndroid) return;
    
    try {
      await _channel.invokeMethod('showUserJoinedNotification', {
        'userName': userName,
        'roomName': roomName,
      });
    } catch (e) {
      Logs().e('Error showing user joined notification: $e');
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
  Future<void> showFileUploadedNotification({
    required String fileName,
    required String roomName,
  }) async {
    if (!PlatformInfos.isAndroid) return;
    
    try {
      await _channel.invokeMethod('showFileUploadedNotification', {
        'fileName': fileName,
        'roomName': roomName,
      });
    } catch (e) {
      Logs().e('Error showing file uploaded notification: $e');
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> showSyncErrorNotification({
    required String error,
  }) async {
    if (!PlatformInfos.isAndroid) return;
    
    try {
      await _channel.invokeMethod('showSyncErrorNotification', {
        'error': error,
      });
    } catch (e) {
      Logs().e('Error showing sync error notification: $e');
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
  Future<void> showLoginSuccessNotification({
    required String userName,
  }) async {
    if (!PlatformInfos.isAndroid) return;
    
    try {
      await _channel.invokeMethod('showLoginSuccessNotification', {
        'userName': userName,
      });
    } catch (e) {
      Logs().e('Error showing login success notification: $e');
    }
  }
  
  // –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> cancelNotification(String type) async {
    if (!PlatformInfos.isAndroid) return;
    
    try {
      await _channel.invokeMethod('cancelNotification', {
        'type': type,
      });
    } catch (e) {
      Logs().e('Error cancelling notification: $e');
    }
  }
  
  // –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> cancelAllNotifications() async {
    if (!PlatformInfos.isAndroid) return;
    
    try {
      await _channel.invokeMethod('cancelAllNotifications');
    } catch (e) {
      Logs().e('Error cancelling all notifications: $e');
    }
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏–π Matrix
  void setupMatrixEventListeners(Client client) {
    client.onEvent.stream.listen((event) {
      _handleMatrixEvent(event);
    });
    
    client.onSync.stream.listen((syncUpdate) {
      _handleSyncUpdate(syncUpdate);
    });
    
    client.onLoginStateChanged.stream.listen((loginState) {
      _handleLoginStateChange(loginState, client);
    });
  }
  
  void _handleMatrixEvent(Event event) {
    switch (event.type) {
      case EventTypes.Message:
      case EventTypes.Encrypted:
        if (event.room.isDirectChat || event.room.pushRuleState == PushRuleState.notify) {
          showMessageNotification(
            senderName: event.senderFromMemoryOrFallback.calcDisplayname(),
            message: event.plaintextBody,
            roomId: event.roomId!,
          );
        }
        break;
        
      case EventTypes.RoomMember:
        final membership = event.content['membership'];
        if (membership == 'join' && event.stateKey != event.senderId) {
          showUserJoinedNotification(
            userName: event.senderFromMemoryOrFallback.calcDisplayname(),
            roomName: event.room.getLocalizedDisplayname(),
          );
        }
        break;
        
      case EventTypes.CallInvite:
        showCallNotification(
          callerName: event.senderFromMemoryOrFallback.calcDisplayname(),
          callId: event.eventId,
        );
        break;
        
      case 'm.file':
      case 'm.image':
      case 'm.video':
      case 'm.audio':
        final fileName = event.content['filename'] ?? event.content['body'] ?? '–§–∞–π–ª';
        showFileUploadedNotification(
          fileName: fileName,
          roomName: event.room.getLocalizedDisplayname(),
        );
        break;
        
      case 'm.reaction':
        final reaction = event.content['m.relates_to']?['key'] ?? 'üëç';
        showNotification(
          type: 'reaction_added',
          title: '–ù–æ–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è',
          message: '${event.senderFromMemoryOrFallback.calcDisplayname()} –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª $reaction –≤ ${event.room.getLocalizedDisplayname()}',
          payload: {
            'userName': event.senderFromMemoryOrFallback.calcDisplayname(),
            'reaction': reaction,
            'roomName': event.room.getLocalizedDisplayname(),
          },
        );
        break;
    }
  }
  
  void _handleSyncUpdate(SyncUpdate syncUpdate) {
    if (syncUpdate.hasRoomUpdate) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–º–Ω–∞—Ç
      for (final roomUpdate in syncUpdate.rooms?.join?.values ?? <JoinedRoomUpdate>[]) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–º–Ω–∞—Ç
      }
    }
  }
  
  void _handleLoginStateChange(LoginState loginState, Client client) {
    switch (loginState) {
      case LoginState.loggedIn:
        showLoginSuccessNotification(
          userName: client.userID ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        );
        break;
      case LoginState.loggedOut:
        cancelAllNotifications();
        break;
      default:
        break;
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> showRoomCreatedNotification(String roomName) async {
    await showNotification(
      type: 'room_created',
      title: '–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞',
      message: '–ö–æ–º–Ω–∞—Ç–∞ "$roomName" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      payload: {'roomName': roomName},
    );
  }
  
  Future<void> showRoomInviteNotification(String roomName, String inviterName) async {
    await showNotification(
      type: 'room_invited',
      title: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É',
      message: '$inviterName –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –≤ "$roomName"',
      payload: {'roomName': roomName, 'inviterName': inviterName},
    );
  }
  
  Future<void> showEncryptionEnabledNotification(String roomName) async {
    await showNotification(
      type: 'encryption_enabled',
      title: '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ',
      message: '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç–µ "$roomName"',
      payload: {'roomName': roomName},
    );
  }
  
  Future<void> showBackupCreatedNotification() async {
    await showNotification(
      type: 'backup_created',
      title: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞',
      message: '–í–∞—à–∏ –∫–ª—é—á–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
    );
  }
  
  Future<void> showDeviceVerifiedNotification(String deviceName) async {
    await showNotification(
      type: 'device_verified',
      title: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ',
      message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ',
      payload: {'deviceName': deviceName},
    );
  }
  
  Future<void> showSpaceJoinedNotification(String spaceName) async {
    await showNotification(
      type: 'space_joined',
      title: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É',
      message: '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É "$spaceName"',
      payload: {'spaceName': spaceName},
    );
  }
}
